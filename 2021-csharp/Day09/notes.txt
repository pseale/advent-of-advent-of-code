Day 09 part A
-------------

[x] read problem statement
[x] scaffolding
[x] parse into 2d array of ints
- loop: for each point,
    - if IsLowPoint(), add Risk Level
[x] return total Risk Level

TWO "LOWEST" NEIGHBORS ARE NEITHER ONE "LOWEST" - SEE 00 BELOW
2199943200
3987894921
9856789892
8767896789
9899965678




Day 09 Part B
-------------

[x] read
- scaffolding
- copy/paste from part A -parsing into grid
- find low points (also from part A)
- for each low point, fill the basin with water, so to speak, and get a collection of all points in the basin
- Sort basins by largest, take 3, sum up the sizes of those 3
























