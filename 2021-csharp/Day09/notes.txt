Day 09 part A
-------------

[x] read problem statement
[x] scaffolding
[x] parse into 2d array of ints
- loop: for each point,
    - if IsLowPoint(), add Risk Level
[x] return total Risk Level

TWO "LOWEST" NEIGHBORS ARE NEITHER ONE "LOWEST" - SEE 00 BELOW
2199943200
3987894921
9856789892
8767896789
9899965678




Day 09 Part B
-------------

[x] read
[x] scaffolding
[x] copy/paste from part A -parsing into grid
[x] find low points (also from part A)
[x] actually read, again
[x] for each low point, fill the basin with water, so to speak, and get a collection of all points in the basin
[x] fix mysterious bugs
[x] Sort basins by largest, take 3, sum up the sizes of those 3











99999
92929
91019
99999

check all 4 directions
 - filter out edges
 - filter out 9s
 - filter out points ALREADY in the basin
 - if ALL ADJACENT points are higher, add this point to the basin AND "check all 4 directions" for ALL (eligible) ADJACENT (recurse)

99999
9999999
9901219
9999999

********
*011101*
********

















